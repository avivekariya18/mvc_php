<div class="pwd-reset-step" id="pwdResetStep3">
  <h2 class="pwd-reset-title">Create New Password</h2>
  <p class="pwd-reset-description">Your new password must be different from previously used passwords.</p>

  <!-- Form action set to your new password controller action -->
  <form id="pwdResetPasswordForm" method="post" action="<?php echo $this->getUrl('*/*/newPassword') ?>">
    <!-- Hidden fields to store email and OTP - Uncomment and add as needed -->
    <!-- <input type="hidden" name="email" value="<?php // echo $this->getEmail(); 
                                                  ?>"> -->
    <!-- <input type="hidden" name="otp" value="<?php // echo $this->getOtp(); 
                                                ?>"> -->

    <div class="pwd-reset-form-group">
      <label for="pwdResetNewPassword" class="pwd-reset-label">New Password</label>
      <div class="pwd-reset-input-wrapper">
        <input type="password" id="pwdResetNewPassword" name="password" required class="pwd-reset-input">
        <button type="button" class="pwd-reset-toggle-password" aria-label="Toggle password visibility">
          <svg class="pwd-reset-eye-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
            <circle cx="12" cy="12" r="3"></circle>
          </svg>
        </button>
      </div>
      <div class="pwd-reset-password-strength">
        <div class="pwd-reset-strength-bar" id="pwdResetStrengthBar"></div>
      </div>
      <div class="pwd-reset-password-requirements">
        <div class="pwd-reset-requirement" id="pwdLengthReq">At least 8 characters</div>
        <div class="pwd-reset-requirement" id="pwdUpperReq">At least 1 uppercase letter</div>
        <div class="pwd-reset-requirement" id="pwdLowerReq">At least 1 lowercase letter</div>
        <div class="pwd-reset-requirement" id="pwdNumberReq">At least 1 number</div>
        <div class="pwd-reset-requirement" id="pwdSpecialReq">At least 1 special character</div>
      </div>
    </div>

    <div class="pwd-reset-form-group">
      <label for="pwdResetConfirmPassword" class="pwd-reset-label">Confirm New Password</label>
      <div class="pwd-reset-input-wrapper">
        <input type="password" id="pwdResetConfirmPassword" name="password_confirmation" required class="pwd-reset-input">
        <button type="button" class="pwd-reset-toggle-password" aria-label="Toggle password visibility">
          <svg class="pwd-reset-eye-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
            <circle cx="12" cy="12" r="3"></circle>
          </svg>
        </button>
      </div>
      <div class="pwd-reset-match-message" id="pwdMatchMessage"></div>
    </div>

    <button type="submit" id="pwdResetSubmitBtn" class="pwd-reset-button" disabled>
      Reset Password
    </button>
  </form>
</div>

<style>
  .pwd-reset-step {
    max-width: 400px;
    margin: 0 auto;
    padding: 2rem;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  }

  .pwd-reset-title {
    margin: 0 0 0.5rem;
    font-size: 1.5rem;
    font-weight: 600;
    color: #333;
    text-align: center;
  }

  .pwd-reset-description {
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
    color: #666;
    text-align: center;
  }

  .pwd-reset-form-group {
    margin-bottom: 1.5rem;
  }

  .pwd-reset-label {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    font-weight: 500;
    color: #444;
  }

  .pwd-reset-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .pwd-reset-input {
    width: 100%;
    padding: 0.75rem 1rem;
    padding-right: 2.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .pwd-reset-input:focus {
    border-color: #4a90e2;
    box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.15);
    outline: none;
  }

  .pwd-reset-toggle-password {
    position: absolute;
    right: 0.5rem;
    background: none;
    border: none;
    color: #888;
    cursor: pointer;
    padding: 0.25rem;
  }

  .pwd-reset-toggle-password:hover {
    color: #555;
  }

  .pwd-reset-password-strength {
    margin-top: 0.5rem;
    height: 4px;
    background-color: #eee;
    border-radius: 2px;
    overflow: hidden;
  }

  .pwd-reset-strength-bar {
    height: 100%;
    width: 0;
    background-color: #e74c3c;
    transition: width 0.3s, background-color 0.3s;
  }

  .pwd-reset-password-requirements {
    margin-top: 0.75rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }

  .pwd-reset-requirement {
    font-size: 0.75rem;
    color: #888;
    position: relative;
    padding-left: 1.25rem;
  }

  .pwd-reset-requirement::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 0.75rem;
    height: 0.75rem;
    border-radius: 50%;
    background-color: #ddd;
  }

  .pwd-reset-requirement.valid {
    color: #27ae60;
  }

  .pwd-reset-requirement.valid::before {
    background-color: #27ae60;
  }

  .pwd-reset-match-message {
    margin-top: 0.5rem;
    font-size: 0.8rem;
    height: 1.2em;
    color: #e74c3c;
  }

  .pwd-reset-button {
    display: block;
    width: 100%;
    padding: 0.85rem 1rem;
    background-color: #4a90e2;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s, opacity 0.2s;
  }

  .pwd-reset-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .pwd-reset-button:hover:not(:disabled) {
    background-color: #3a80d2;
  }

  .pwd-reset-button:active:not(:disabled) {
    transform: translateY(1px);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const newPasswordInput = document.getElementById('pwdResetNewPassword');
    const confirmPasswordInput = document.getElementById('pwdResetConfirmPassword');
    const strengthBar = document.getElementById('pwdResetStrengthBar');
    const submitButton = document.getElementById('pwdResetSubmitBtn');
    const matchMessage = document.getElementById('pwdMatchMessage');
    const toggleButtons = document.querySelectorAll('.pwd-reset-toggle-password');

    // Password requirement elements
    const lengthReq = document.getElementById('pwdLengthReq');
    const upperReq = document.getElementById('pwdUpperReq');
    const lowerReq = document.getElementById('pwdLowerReq');
    const numberReq = document.getElementById('pwdNumberReq');
    const specialReq = document.getElementById('pwdSpecialReq');

    // Regular expressions for password validation
    const lengthRegex = /.{8,}/;
    const upperRegex = /[A-Z]/;
    const lowerRegex = /[a-z]/;
    const numberRegex = /[0-9]/;
    const specialRegex = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/;

    // Toggle password visibility
    toggleButtons.forEach(button => {
      button.addEventListener('click', function() {
        const input = this.parentElement.querySelector('input');
        if (input.type === 'password') {
          input.type = 'text';
          this.querySelector('svg').innerHTML = '<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><line x1="1" y1="1" x2="23" y2="23"></line>';
        } else {
          input.type = 'password';
          this.querySelector('svg').innerHTML = '<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle>';
        }
      });
    });

    // Check password strength and requirements
    function checkPasswordStrength(password) {
      let strength = 0;
      let meetsAllRequirements = true;

      // Check each requirement
      if (lengthRegex.test(password)) {
        lengthReq.classList.add('valid');
        strength += 20;
      } else {
        lengthReq.classList.remove('valid');
        meetsAllRequirements = false;
      }

      if (upperRegex.test(password)) {
        upperReq.classList.add('valid');
        strength += 20;
      } else {
        upperReq.classList.remove('valid');
        meetsAllRequirements = false;
      }

      if (lowerRegex.test(password)) {
        lowerReq.classList.add('valid');
        strength += 20;
      } else {
        lowerReq.classList.remove('valid');
        meetsAllRequirements = false;
      }

      if (numberRegex.test(password)) {
        numberReq.classList.add('valid');
        strength += 20;
      } else {
        numberReq.classList.remove('valid');
        meetsAllRequirements = false;
      }

      if (specialRegex.test(password)) {
        specialReq.classList.add('valid');
        strength += 20;
      } else {
        specialReq.classList.remove('valid');
        meetsAllRequirements = false;
      }

      // Update strength bar
      strengthBar.style.width = strength + '%';

      // Update strength bar color
      if (strength < 40) {
        strengthBar.style.backgroundColor = '#e74c3c'; // Red - weak
      } else if (strength < 80) {
        strengthBar.style.backgroundColor = '#f39c12'; // Orange - medium
      } else {
        strengthBar.style.backgroundColor = '#27ae60'; // Green - strong
      }

      return meetsAllRequirements;
    }

    // Check if passwords match
    function checkPasswordMatch() {
      const password = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      if (confirmPassword.length === 0) {
        matchMessage.textContent = '';
        return false;
      } else if (password === confirmPassword) {
        matchMessage.textContent = 'Passwords match';
        matchMessage.style.color = '#27ae60';
        return true;
      } else {
        matchMessage.textContent = 'Passwords do not match';
        matchMessage.style.color = '#e74c3c';
        return false;
      }
    }

    // Update submit button state
    function updateSubmitButton() {
      const password = newPasswordInput.value;
      const meetsRequirements = checkPasswordStrength(password);
      const passwordsMatch = checkPasswordMatch();

      submitButton.disabled = !(meetsRequirements && passwordsMatch);
    }

    // Event listeners
    newPasswordInput.addEventListener('input', updateSubmitButton);
    confirmPasswordInput.addEventListener('input', updateSubmitButton);

    // Form submission
    document.getElementById('pwdResetPasswordForm').addEventListener('submit', function(e) {
      const password = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      if (password !== confirmPassword) {
        e.preventDefault();
        matchMessage.textContent = 'Passwords do not match';
        matchMessage.style.color = '#e74c3c';
      }
    });
  });
</script>